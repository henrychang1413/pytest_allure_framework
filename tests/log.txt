. mysql/test_mysql_class.py::TestJsonData::test_create_table_events
. mysql/test_mysql_class.py::TestJsonData::test_create_insert_data_to_events
. mysql/test_mysql_class.py::TestJsonData::test_check_table_events_exists
. mysql/test_mysql_class.py::TestJsonData::test_check_delete_events_data
. mysql/test_mysql_class.py::TestJsonData::test_mysql_truncate_all_data_events
. mysql/test_mysql_class.py::TestJsonData::test_mysql_drop_table_events
. mysql/test_mysql_function.py::test_mysql_create_table_employee
. mysql/test_mysql_function.py::test_mysql_insert_data_to_employee
. mysql/test_mysql_function.py::test_mysql_delete_data_from_employee
. mysql/test_mysql_function.py::test_mysql_truncate_all_data
. mysql/test_mysql_function.py::test_mysql_drop_table_employee
F test_math_algorithm/test_max_product.py::test_max_product_from_list
 get_test_product_data = [((1, 2, 3), 6), ((-1, -2, -3), 6), ((-1, 2, 1), 2), ((-3, 2, 8), 24)]
 
     def test_max_product_from_list(get_test_product_data):
         for ele in get_test_product_data:
             input_list = []
             for node in ele[0]:
                 input_list.append(node)
             expected = ele[1]
             log.info(" input list  is %s, expected is %s" % (str(input_list),str(expected)) )
             calc_value = max_product_from_list(input_list)
 >           assert calc_value == expected, 'expected max product value is %s' %str(expected)
 E           AssertionError: expected max product value is 6
 E           assert 2 == 6
 E             -2
 E             +6
 
 test_math_algorithm\test_max_product.py:20: AssertionError
. test_math_algorithm/test_max_product.py::test_max_product_from_list_parametrize[input_list0-40]
. test_math_algorithm/test_max_product.py::test_max_product_from_list_parametrize[input_list1-24]
. test_math_algorithm/test_max_sum.py::test_max_sum_from_list
. test_math_algorithm/test_max_sum.py::test_max_sum_from_list_parametrize[input_list0-13]
. test_math_algorithm/test_max_sum.py::test_max_sum_from_list_parametrize[input_list1-10]
